import { get } from "svelte/store";
import { effect, addEventListener, setAttributes } from "../index.js";
export function createFieldActions(props) {
    const { ids, attrs, hasValidation, hasDescription, value, name } = props;
    const controlAttrs = {
        ids,
        value,
        name,
        attrs
    };
    return {
        label: createLabelAction({
            ids
        }),
        description: createDescriptionAction({ ids, hasDescription }),
        validation: createValidationAction({
            ids,
            hasValidation,
            attrs: {
                "aria-live": "assertive"
            }
        }),
        input: createInputAction({ ...controlAttrs }),
        textarea: createTextareaAction({ ...controlAttrs }),
        radio: createRadioAction({ ...controlAttrs }),
        select: createSelectAction({ ...controlAttrs }),
        checkbox: createCheckboxAction({ ...controlAttrs })
    };
}
function createLabelAction(props) {
    const { ids } = props;
    return (node) => {
        node.htmlFor = get(ids).input;
        const handleMouseDown = (e) => {
            e.preventDefault();
        };
        const unsubEffect = effect(ids, ($ids) => {
            node.htmlFor = $ids.input;
        });
        const unsubEvent = addEventListener(node, "mousedown", handleMouseDown);
        return {
            destroy() {
                unsubEvent();
                unsubEffect();
            }
        };
    };
}
function createValidationAction(props) {
    const { ids, hasValidation, attrs } = props;
    return (node) => {
        node.id = get(ids).validation;
        setAttributes(node, attrs);
        hasValidation.set(true);
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.validation;
        });
        return {
            destroy() {
                hasValidation.set(false);
                unsubEffect();
            }
        };
    };
}
function createDescriptionAction(props) {
    const { ids, hasDescription } = props;
    return (node) => {
        node.id = get(ids).description;
        hasDescription.set(true);
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.description;
        });
        return {
            destroy() {
                hasDescription.set(false);
                unsubEffect();
            }
        };
    };
}
function createInputAction(props) {
    const { ids, value, name, attrs } = props;
    return (node) => {
        node.id = get(ids).input;
        node.value = get(value) ?? "";
        node.name = name;
        const unsubAttrs = effect(attrs, ($attrs) => {
            setAttributes(node, $attrs);
        });
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.input;
        });
        const handleInput = () => {
            value.set(node.value);
        };
        const unsubEvent = addEventListener(node, "input", handleInput);
        return {
            destroy() {
                unsubEvent();
                unsubAttrs();
                unsubEffect();
            }
        };
    };
}
function createTextareaAction(props) {
    const { ids, value, name, attrs } = props;
    return (node) => {
        node.id = get(ids).input;
        node.value = get(value) ?? "";
        node.name = name;
        const unsubAttrs = effect(attrs, ($attrs) => {
            setAttributes(node, $attrs);
        });
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.input;
        });
        const handleInput = () => {
            value.set(node.value);
        };
        const unsubEvent = addEventListener(node, "input", handleInput);
        return {
            destroy() {
                unsubEvent();
                unsubAttrs();
                unsubEffect();
            }
        };
    };
}
function createCheckboxAction(props) {
    const { ids, value, name, attrs } = props;
    return (node) => {
        node.id = get(ids).input;
        node.checked = get(value) ?? false;
        node.name = name;
        const handleChange = () => {
            value.set(node.checked);
        };
        const unsubAttrs = effect(attrs, ($attrs) => {
            setAttributes(node, $attrs);
        });
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.validation;
        });
        const unsubEvent = addEventListener(node, "change", handleChange);
        return {
            destroy() {
                unsubEvent();
                unsubAttrs();
                unsubEffect();
            }
        };
    };
}
export function createRadioAction(props) {
    const { ids, value, name, attrs } = props;
    return (node) => {
        node.id = get(ids).input;
        node.name = name;
        const $value = get(value);
        if (node.value === $value) {
            node.checked = true;
        }
        else {
            node.checked = false;
        }
        const unsubAttrs = effect(attrs, ($attrs) => {
            delete $attrs.value;
            setAttributes(node, $attrs);
        });
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.input;
        });
        const handleChange = () => {
            if (node.checked) {
                value.set(node.value);
            }
        };
        const unsubEvent = addEventListener(node, "change", handleChange);
        return {
            destroy() {
                unsubEvent();
                unsubAttrs();
                unsubEffect();
            }
        };
    };
}
function createSelectAction(props) {
    const { ids, value, name, attrs } = props;
    return (node) => {
        node.id = get(ids).input;
        node.value = get(value) ?? "";
        node.name = name;
        const handleChange = () => {
            value.set(node.value);
        };
        const unsubEffect = effect(ids, ($ids) => {
            node.id = $ids.input;
        });
        const unsubAttrs = effect(attrs, ($attrs) => {
            setAttributes(node, $attrs);
        });
        const unsubEvent = addEventListener(node, "change", handleChange);
        return {
            destroy() {
                unsubEvent();
                unsubAttrs();
                unsubEffect();
            }
        };
    };
}
