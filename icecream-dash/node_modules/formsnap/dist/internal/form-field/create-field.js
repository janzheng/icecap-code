import { get, writable } from "svelte/store";
import { createFieldActions, createFieldHandlers } from "../index.js";
import { setContext } from "svelte";
export const FORM_FIELD_CONTEXT = "FormField";
export function createFormField(name, attrStore, value, errors, ids) {
    const hasValidation = writable(false);
    const hasDescription = writable(false);
    const actions = createFieldActions({
        ids,
        attrs: attrStore,
        hasValidation,
        hasDescription,
        value,
        name
    });
    const setValue = (v) => {
        value.set(v);
    };
    const handlers = createFieldHandlers(setValue);
    const context = {
        ids,
        name,
        errors,
        value,
        hasValidation,
        hasDescription,
        attrStore,
        actions,
        setValue,
        handlers
    };
    setContext(FORM_FIELD_CONTEXT, context);
    function getFieldAttrs(props) {
        const { val, errors, constraints, hasValidation, hasDescription } = props;
        const $ids = get(ids);
        const describedBy = errors
            ? `${hasValidation ? $ids.validation : ""} ${hasDescription ? $ids.description : ""}`
            : hasDescription
                ? $ids.description
                : undefined;
        const attrs = {
            "aria-invalid": errors ? true : undefined,
            "aria-describedby": describedBy,
            "aria-required": !!constraints?.required,
            "data-invalid": errors ? true : undefined,
            "data-valid": errors ? undefined : true,
            name,
            id: $ids.input,
            value: val
        };
        attrStore.set(attrs);
        return attrs;
    }
    return {
        getFieldAttrs,
        actions,
        attrStore,
        hasDescription,
        hasValidation,
        handlers,
        setValue,
        context
    };
}
