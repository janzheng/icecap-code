import { SvelteComponent } from "svelte";
import type { UnwrapEffects, ZodValidation } from "sveltekit-superforms";
import type { AnyZodObject } from "zod";
import type { Form } from "../internal/index.js";
type Validation = ZodValidation<AnyZodObject>;
import type { FormEvents } from "../types.js";
import { type SuperForm } from "sveltekit-superforms/client";
import type { SuperValidated } from "sveltekit-superforms";
declare class __sveltets_Render<T extends Validation = Validation, M = any> {
    props(): {
        /**
         * The schema representing the structure of the form, used to provide
         * validation by default (uncontrolled), and type information to the form.
         *
         * @see https://zod.dev
         */
        schema: T;
        /**
         * Whether to delegate rendering the `form` element which enables
         * you to use your own `<form />` element. You can then leverage the
         * `enhance` and `attrs` slot props to bring your form element to life.
         * @default false
         *
         * @example
         * ```svelte
         * <Form.Root {schema} form={data.form} asChild let:enhance let:attrs>
         * 	<form use:enhance {...attrs}>
         * 		<!-- ... -->
         * 	</form>
         * </Form.Root>
         * ```
         *
         * @see https://formsnap.dev/docs/headless-usage
         */
        asChild?: boolean | undefined;
        /**
         * Optionally display the `SuperDebug` component beneath your
         * form for debugging purposes.
         *
         * @see https://formsnap.dev/docs/debug-mode
         */
        debug?: boolean | undefined;
        /**
         * Whether the form is controlled or not. Controlled forms
         * are used when you want to initialize the `superForm` yourself.
         *
         * When set to true, you need to pass the object returned from the
         * `superForm` function as the `form` prop. When false, you just pass
         * the `SuperValidated` (data.form) object as the `form` prop.
         *
         * @example <caption>Example of controlled usage</caption>
         * ```typescript
         * // script tag
         * import { superForm } from "sveltekit-superforms/client";
         * import { schema } from "./schema";
         * export let data;
         * const superFrm = superForm(data.form, { validators: schema })
         * // closing script tag
         * ```
         *
         * ```svelte
         * <Form.Root form={superFrm} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         *
         * @example <caption>Example of uncontrolled (default) usage</caption>
         *  ```svelte
         * <Form.Root form={data.form}>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         */
        controlled: true;
        /**
         * The `SuperForm` object returned from the `superForm` function when
         * the `controlled` prop is set to true. Otherwise, you pass the form
         * returned from the load function.
         *
         * @example <caption>Example of controlled usage</caption>
         * ```typescript
         * // script tag
         * import { superForm } from "sveltekit-superforms/client";
         * import { schema } from "./schema";
         * export let data;
         * const superFrm = superForm(data.form, { validators: schema })
         * // closing script tag
         * ```
         *
         * ```svelte
         * <Form.Root form={superFrm} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         *
         * @example <caption>Example of uncontrolled (default) usage</caption>
         *  ```svelte
         * <Form.Root form={data.form}>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         */
        form: SuperForm<UnwrapEffects<T>, M>;
        acceptcharset?: string | null | undefined;
        action?: string | null | undefined;
        autocomplete?: string | null | undefined;
        enctype?: string | null | undefined;
        method?: string | null | undefined;
        name?: string | null | undefined;
        novalidate?: boolean | null | undefined;
        target?: string | null | undefined;
        rel?: string | null | undefined;
        accesskey?: string | null | undefined;
        autofocus?: boolean | null | undefined;
        class?: string | null | undefined;
        contenteditable?: import("svelte/elements").Booleanish | "inherit" | null | undefined;
        contextmenu?: string | null | undefined;
        dir?: string | null | undefined;
        draggable?: import("svelte/elements").Booleanish | null | undefined;
        enterkeyhint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | null | undefined;
        hidden?: boolean | null | undefined;
        id?: string | null | undefined;
        lang?: string | null | undefined;
        part?: string | null | undefined;
        placeholder?: string | null | undefined;
        slot?: string | null | undefined;
        spellcheck?: import("svelte/elements").Booleanish | null | undefined;
        style?: string | null | undefined;
        tabindex?: number | null | undefined;
        title?: string | null | undefined;
        translate?: "" | "yes" | "no" | null | undefined;
        inert?: boolean | null | undefined;
        radiogroup?: string | null | undefined;
        role?: import("svelte/elements").AriaRole | null | undefined;
        about?: string | null | undefined;
        datatype?: string | null | undefined;
        inlist?: any;
        prefix?: string | null | undefined;
        property?: string | null | undefined;
        resource?: string | null | undefined;
        typeof?: string | null | undefined;
        vocab?: string | null | undefined;
        autocapitalize?: string | null | undefined;
        autocorrect?: string | null | undefined;
        autosave?: string | null | undefined;
        color?: string | null | undefined;
        itemprop?: string | null | undefined;
        itemscope?: boolean | null | undefined;
        itemtype?: string | null | undefined;
        itemid?: string | null | undefined;
        itemref?: string | null | undefined;
        results?: number | null | undefined;
        security?: string | null | undefined;
        unselectable?: "on" | "off" | null | undefined;
        inputmode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | null | undefined;
        is?: string | null | undefined;
        'bind:innerHTML'?: string | null | undefined;
        'bind:textContent'?: string | null | undefined;
        'bind:innerText'?: string | null | undefined;
        'bind:contentRect'?: DOMRectReadOnly | null | undefined;
        'bind:contentBoxSize'?: ResizeObserverSize[] | null | undefined;
        'bind:borderBoxSize'?: ResizeObserverSize[] | null | undefined;
        'bind:devicePixelContentBoxSize'?: ResizeObserverSize[] | null | undefined;
        'data-sveltekit-keepfocus'?: true | "" | "off" | null | undefined;
        'data-sveltekit-noscroll'?: true | "" | "off" | null | undefined;
        'data-sveltekit-preload-code'?: true | "" | "off" | "eager" | "viewport" | "hover" | "tap" | null | undefined;
        'data-sveltekit-preload-data'?: true | "" | "off" | "hover" | "tap" | null | undefined;
        'data-sveltekit-reload'?: true | "" | "off" | null | undefined;
        'data-sveltekit-replacestate'?: true | "" | "off" | null | undefined;
        'aria-activedescendant'?: string | null | undefined;
        'aria-atomic'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | null | undefined;
        'aria-busy'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | null | undefined;
        'aria-colcount'?: number | null | undefined;
        'aria-colindex'?: number | null | undefined;
        'aria-colspan'?: number | null | undefined;
        'aria-controls'?: string | null | undefined;
        'aria-current'?: "time" | import("svelte/elements").Booleanish | "page" | "step" | "location" | "date" | null | undefined;
        'aria-describedby'?: string | null | undefined;
        'aria-details'?: string | null | undefined;
        'aria-disabled'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | null | undefined;
        'aria-errormessage'?: string | null | undefined;
        'aria-expanded'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-flowto'?: string | null | undefined;
        'aria-grabbed'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-haspopup'?: "dialog" | "menu" | import("svelte/elements").Booleanish | "grid" | "listbox" | "tree" | null | undefined;
        'aria-hidden'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling" | null | undefined;
        'aria-keyshortcuts'?: string | null | undefined;
        'aria-label'?: string | null | undefined;
        'aria-labelledby'?: string | null | undefined;
        'aria-level'?: number | null | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | null | undefined;
        'aria-modal'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-multiline'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-multiselectable'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | null | undefined;
        'aria-owns'?: string | null | undefined;
        'aria-placeholder'?: string | null | undefined;
        'aria-posinset'?: number | null | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | null | undefined;
        'aria-readonly'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | null | undefined;
        'aria-required'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-roledescription'?: string | null | undefined;
        'aria-rowcount'?: number | null | undefined;
        'aria-rowindex'?: number | null | undefined;
        'aria-rowspan'?: number | null | undefined;
        'aria-selected'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-setsize'?: number | null | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | null | undefined;
        'aria-valuemax'?: number | null | undefined;
        'aria-valuemin'?: number | null | undefined;
        'aria-valuenow'?: number | null | undefined;
        'aria-valuetext'?: string | null | undefined;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:change'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLFormElement> | null | undefined;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:submit'?: import("svelte/elements").EventHandler<SubmitEvent, HTMLFormElement> | null | undefined;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:formdata'?: import("svelte/elements").EventHandler<FormDataEvent, HTMLFormElement> | null | undefined;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element> | null | undefined;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element> | null | undefined;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLFormElement> | null | undefined;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLFormElement> | null | undefined;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLFormElement> | null | undefined;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLFormElement> | null | undefined;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLFormElement> | null | undefined;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
    } | {
        /**
         * The schema representing the structure of the form, used to provide
         * validation by default (uncontrolled), and type information to the form.
         *
         * @see https://zod.dev
         */
        schema: T;
        /**
         * Whether to delegate rendering the `form` element which enables
         * you to use your own `<form />` element. You can then leverage the
         * `enhance` and `attrs` slot props to bring your form element to life.
         * @default false
         *
         * @example
         * ```svelte
         * <Form.Root {schema} form={data.form} asChild let:enhance let:attrs>
         * 	<form use:enhance {...attrs}>
         * 		<!-- ... -->
         * 	</form>
         * </Form.Root>
         * ```
         *
         * @see https://formsnap.dev/docs/headless-usage
         */
        asChild?: boolean | undefined;
        /**
         * Optionally display the `SuperDebug` component beneath your
         * form for debugging purposes.
         *
         * @see https://formsnap.dev/docs/debug-mode
         */
        debug?: boolean | undefined;
        /**
         * Whether the form is controlled or not. Controlled forms
         * are used when you want to initialize the `superForm` yourself.
         *
         * When set to true, you need to pass the object returned from the
         * `superForm` function as the `form` prop. When false, you just pass
         * the `SuperValidated` (data.form) object as the `form` prop.
         *
         * @example <caption>Example of controlled usage</caption>
         * ```typescript
         * // script tag
         * import { superForm } from "sveltekit-superforms/client";
         * import { schema } from "./schema";
         * export let data;
         * const superFrm = superForm(data.form, { validators: schema })
         * // closing script tag
         * ```
         *
         * ```svelte
         * <Form.Root form={superFrm} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         *
         * @example <caption>Example of uncontrolled (default) usage</caption>
         *  ```svelte
         * <Form.Root form={data.form} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         */
        controlled?: false | undefined;
        /**
         * The `SuperForm` object returned from the `superForm` function when
         * the `controlled` prop is set to true. Otherwise, you pass the form
         * returned from the load function.
         *
         * @example <caption>Example of default usage</caption>
         * ```svelte
         * <Form.Root form={data.form} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         *
         * @example <caption>Example of controlled usage</caption>
         * ```typescript
         * // script tag
         * import { superForm } from "sveltekit-superforms/client";
         * import { schema } from "./schema";
         * export let data;
         * const superFrm = superForm(data.form, { validators: schema })
         * // closing script tag
         * ```
         *
         * ```svelte
         * <Form.Root form={superFrm} controlled>
         * 	<!-- ... -->
         * </Form.Root>
         * ```
         *
         */
        form: SuperValidated<T, M>;
        /**
         * When uncontrolled, you can optionally pass any options
         * that you would normally pass to the `superForm` function.
         *
         * @see https://superforms.rocks/api#superform-options
         */
        options?: Partial<{
            id: string;
            applyAction: boolean;
            invalidateAll: boolean;
            resetForm: boolean | (() => boolean);
            scrollToError: boolean | "off" | ScrollIntoViewOptions | "auto" | "smooth";
            autoFocusOnError: boolean | "detect";
            errorSelector: string;
            selectErrorText: boolean;
            stickyNavbar: string;
            taintedMessage: string | false | null;
            SPA: true | {
                failStatus?: number | undefined;
            };
            onSubmit: (input: {
                action: URL;
                data: FormData;
                formData: FormData;
                form: HTMLFormElement;
                formElement: HTMLFormElement;
                controller: AbortController;
                submitter: HTMLElement | null;
                cancel(): void;
            }) => unknown;
            onResult: (event: {
                result: import("../internal/index.js").SvelteActionResult;
                formEl: HTMLFormElement;
                cancel: () => void;
            }) => unknown;
            onUpdate: (event: {
                form: import("..").SuperValidated<import("..").UnwrapEffects<UnwrapEffects<T>>, M>;
                formEl: HTMLFormElement;
                cancel: () => void;
            }) => unknown;
            onUpdated: (event: {
                form: Readonly<import("..").SuperValidated<import("..").UnwrapEffects<UnwrapEffects<T>>, M>>;
            }) => unknown;
            onError: "apply" | ((event: {
                result: {
                    type: "error";
                    status?: number | undefined;
                    error: App.Error;
                };
                message: import("svelte/store").Writable<M | undefined>;
            }) => unknown);
            dataType: "form" | "json";
            jsonChunkSize: number;
            validators: import("../internal/index.js").Validators<import("..").UnwrapEffects<UnwrapEffects<T>>> | import("..").ZodValidation<import("..").UnwrapEffects<UnwrapEffects<T>>>;
            validationMethod: "auto" | "oninput" | "onblur" | "submit-only";
            defaultValidator: "keep" | "clear";
            customValidity: boolean;
            clearOnSubmit: "errors" | "none" | "message" | "errors-and-message";
            delayMs: number;
            timeoutMs: number;
            multipleSubmits: "prevent" | "allow" | "abort";
            syncFlashMessage?: boolean | undefined;
            flashMessage: {
                module: {
                    getFlash(page: import("svelte/store").Readable<import("../internal/index.js").SveltePage>): import("svelte/store").Writable<any>;
                    updateFlash(page: import("svelte/store").Readable<import("../internal/index.js").SveltePage>, update?: (() => Promise<void>) | undefined): Promise<boolean>;
                };
                onError?: ((event: {
                    result: {
                        type: "error";
                        status?: number | undefined;
                        error: App.Error;
                    };
                    message: import("svelte/store").Writable<any>;
                }) => unknown) | undefined;
                cookiePath?: string | undefined;
                cookieName?: string | undefined;
            };
            warnings: {
                duplicateId?: boolean | undefined;
                noValidationAndConstraints?: boolean | undefined;
            };
        }> | undefined;
        acceptcharset?: string | null | undefined;
        action?: string | null | undefined;
        autocomplete?: string | null | undefined;
        enctype?: string | null | undefined;
        method?: string | null | undefined;
        name?: string | null | undefined;
        novalidate?: boolean | null | undefined;
        target?: string | null | undefined;
        rel?: string | null | undefined;
        accesskey?: string | null | undefined;
        autofocus?: boolean | null | undefined;
        class?: string | null | undefined;
        contenteditable?: import("svelte/elements").Booleanish | "inherit" | null | undefined;
        contextmenu?: string | null | undefined;
        dir?: string | null | undefined;
        draggable?: import("svelte/elements").Booleanish | null | undefined;
        enterkeyhint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | null | undefined;
        hidden?: boolean | null | undefined;
        id?: string | null | undefined;
        lang?: string | null | undefined;
        part?: string | null | undefined;
        placeholder?: string | null | undefined;
        slot?: string | null | undefined;
        spellcheck?: import("svelte/elements").Booleanish | null | undefined;
        style?: string | null | undefined;
        tabindex?: number | null | undefined;
        title?: string | null | undefined;
        translate?: "" | "yes" | "no" | null | undefined;
        inert?: boolean | null | undefined;
        radiogroup?: string | null | undefined;
        role?: import("svelte/elements").AriaRole | null | undefined;
        about?: string | null | undefined;
        datatype?: string | null | undefined;
        inlist?: any;
        prefix?: string | null | undefined;
        property?: string | null | undefined;
        resource?: string | null | undefined;
        typeof?: string | null | undefined;
        vocab?: string | null | undefined;
        autocapitalize?: string | null | undefined;
        autocorrect?: string | null | undefined;
        autosave?: string | null | undefined;
        color?: string | null | undefined;
        itemprop?: string | null | undefined;
        itemscope?: boolean | null | undefined;
        itemtype?: string | null | undefined;
        itemid?: string | null | undefined;
        itemref?: string | null | undefined;
        results?: number | null | undefined;
        security?: string | null | undefined;
        unselectable?: "on" | "off" | null | undefined;
        inputmode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | null | undefined;
        is?: string | null | undefined;
        'bind:innerHTML'?: string | null | undefined;
        'bind:textContent'?: string | null | undefined;
        'bind:innerText'?: string | null | undefined;
        'bind:contentRect'?: DOMRectReadOnly | null | undefined;
        'bind:contentBoxSize'?: ResizeObserverSize[] | null | undefined;
        'bind:borderBoxSize'?: ResizeObserverSize[] | null | undefined;
        'bind:devicePixelContentBoxSize'?: ResizeObserverSize[] | null | undefined;
        'data-sveltekit-keepfocus'?: true | "" | "off" | null | undefined;
        'data-sveltekit-noscroll'?: true | "" | "off" | null | undefined;
        'data-sveltekit-preload-code'?: true | "" | "off" | "eager" | "viewport" | "hover" | "tap" | null | undefined;
        'data-sveltekit-preload-data'?: true | "" | "off" | "hover" | "tap" | null | undefined;
        'data-sveltekit-reload'?: true | "" | "off" | null | undefined;
        'data-sveltekit-replacestate'?: true | "" | "off" | null | undefined;
        'aria-activedescendant'?: string | null | undefined;
        'aria-atomic'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | null | undefined;
        'aria-busy'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | null | undefined;
        'aria-colcount'?: number | null | undefined;
        'aria-colindex'?: number | null | undefined;
        'aria-colspan'?: number | null | undefined;
        'aria-controls'?: string | null | undefined;
        'aria-current'?: "time" | import("svelte/elements").Booleanish | "page" | "step" | "location" | "date" | null | undefined;
        'aria-describedby'?: string | null | undefined;
        'aria-details'?: string | null | undefined;
        'aria-disabled'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | null | undefined;
        'aria-errormessage'?: string | null | undefined;
        'aria-expanded'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-flowto'?: string | null | undefined;
        'aria-grabbed'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-haspopup'?: "dialog" | "menu" | import("svelte/elements").Booleanish | "grid" | "listbox" | "tree" | null | undefined;
        'aria-hidden'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-invalid'?: import("svelte/elements").Booleanish | "grammar" | "spelling" | null | undefined;
        'aria-keyshortcuts'?: string | null | undefined;
        'aria-label'?: string | null | undefined;
        'aria-labelledby'?: string | null | undefined;
        'aria-level'?: number | null | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | null | undefined;
        'aria-modal'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-multiline'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-multiselectable'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | null | undefined;
        'aria-owns'?: string | null | undefined;
        'aria-placeholder'?: string | null | undefined;
        'aria-posinset'?: number | null | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | null | undefined;
        'aria-readonly'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | null | undefined;
        'aria-required'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-roledescription'?: string | null | undefined;
        'aria-rowcount'?: number | null | undefined;
        'aria-rowindex'?: number | null | undefined;
        'aria-rowspan'?: number | null | undefined;
        'aria-selected'?: import("svelte/elements").Booleanish | null | undefined;
        'aria-setsize'?: number | null | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | null | undefined;
        'aria-valuemax'?: number | null | undefined;
        'aria-valuemin'?: number | null | undefined;
        'aria-valuenow'?: number | null | undefined;
        'aria-valuetext'?: string | null | undefined;
        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLFormElement> | null | undefined;
        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLFormElement> | null | undefined;
        'on:change'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLFormElement> | null | undefined;
        'on:input'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLFormElement> | null | undefined;
        'on:submit'?: import("svelte/elements").EventHandler<SubmitEvent, HTMLFormElement> | null | undefined;
        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:formdata'?: import("svelte/elements").EventHandler<FormDataEvent, HTMLFormElement> | null | undefined;
        'on:load'?: import("svelte/elements").EventHandler<Event, Element> | null | undefined;
        'on:error'?: import("svelte/elements").EventHandler<Event, Element> | null | undefined;
        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLFormElement> | null | undefined;
        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLFormElement> | null | undefined;
        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLFormElement> | null | undefined;
        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLFormElement> | null | undefined;
        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLFormElement> | null | undefined;
        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLFormElement> | null | undefined;
        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLFormElement> | null | undefined;
        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLFormElement> | null | undefined;
        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLFormElement> | null | undefined;
        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> | null | undefined;
        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLFormElement> | null | undefined;
        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLFormElement> | null | undefined;
        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLFormElement> | null | undefined;
    };
    events(): FormEvents;
    slots(): {
        default: {
            config: Form<T>;
            formStore: {
                subscribe: (this: void, run: import("svelte/store").Subscriber<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>>, invalidate?: import("svelte/store").Invalidator<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>> | undefined) => import("svelte/store").Unsubscriber;
                set(this: void, value: import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>, options?: {
                    taint?: import("sveltekit-superforms/client").TaintOption<UnwrapEffects<UnwrapEffects<T>>> | undefined;
                } | undefined): void;
                update(this: void, updater: import("svelte/store").Updater<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>>, options?: {
                    taint?: import("sveltekit-superforms/client").TaintOption<UnwrapEffects<UnwrapEffects<T>>> | undefined;
                } | undefined): void;
            };
            formValues: import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>;
            form: SuperForm<UnwrapEffects<T>, M>;
            enhance: (el: HTMLFormElement, events?: import("sveltekit-superforms/dist/client/formEnhance").SuperFormEvents<UnwrapEffects<UnwrapEffects<T>>, M> | undefined) => {
                destroy(): void;
            };
            attrs: {
                "data-fs-form": string;
                "data-fs-error": string | undefined;
            };
            allErrors: {
                path: string;
                messages: string[];
            }[];
            delayed: boolean;
            errors: import("sveltekit-superforms").ValidationErrors<UnwrapEffects<UnwrapEffects<T>>>;
            reset: (options?: Partial<{
                keepMessage: boolean;
                data: Partial<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>>;
                id: string;
            }> | undefined) => void;
            submitting: boolean;
            tainted: import("sveltekit-superforms").TaintedFields<UnwrapEffects<UnwrapEffects<T>>> | undefined;
            timeout: boolean;
            validate: {
                (): Promise<SuperValidated<ZodValidation<UnwrapEffects<UnwrapEffects<T>>>>>;
                (path: import("sveltekit-superforms").FormPathLeaves<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>>, opts?: Partial<{
                    value: import("sveltekit-superforms/dist/stringPath").FormPathType<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>, import("sveltekit-superforms").FormPathLeaves<import("zod").TypeOf<UnwrapEffects<UnwrapEffects<T>>>>>;
                    update: boolean | "errors" | "value";
                    taint: import("sveltekit-superforms/client").TaintOption<UnwrapEffects<UnwrapEffects<T>>>;
                    errors: string | string[];
                }> | undefined): Promise<string[] | undefined>;
            };
            posted: boolean;
            fields: import("sveltekit-superforms").FormFields<UnwrapEffects<UnwrapEffects<T>>>;
            formId: string | undefined;
            restore: (snapshot: SuperValidated<UnwrapEffects<UnwrapEffects<T>>, M> & {
                tainted: import("sveltekit-superforms").TaintedFields<UnwrapEffects<UnwrapEffects<T>>> | undefined;
            }) => void;
            capture: () => SuperValidated<UnwrapEffects<UnwrapEffects<T>>, M> & {
                tainted: import("sveltekit-superforms").TaintedFields<UnwrapEffects<UnwrapEffects<T>>> | undefined;
            };
            message: M | undefined;
        };
    };
}
export type FormProps<T extends Validation = Validation, M = any> = ReturnType<__sveltets_Render<T, M>['props']>;
export type FormEvents<T extends Validation = Validation, M = any> = ReturnType<__sveltets_Render<T, M>['events']>;
export type FormSlots<T extends Validation = Validation, M = any> = ReturnType<__sveltets_Render<T, M>['slots']>;
export default class Form<T extends Validation = Validation, M = any> extends SvelteComponent<FormProps<T, M>, FormEvents<T, M>, FormSlots<T, M>> {
}
export {};
