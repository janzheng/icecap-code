import { SvelteComponent } from "svelte";
import type { Form, FormFieldName, FormValidation } from "../internal/index.js";
import type { AnyZodObject } from "zod";
declare class __sveltets_Render<T extends AnyZodObject | FormValidation, Path extends FormFieldName<T>> {
    props(): {
        config: Form<T>;
        name: Path;
    };
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {
            stores: {
                errors: import("svelte/store").Writable<string[] | undefined>;
                value: import("svelte/store").Writable<import("sveltekit-superforms/dist/stringPath").FormPathType<import("zod").TypeOf<import("sveltekit-superforms").UnwrapEffects<T>>, Path>>;
                constraints: import("svelte/store").Writable<Partial<{
                    pattern: string;
                    min: string | number;
                    max: string | number;
                    required: boolean;
                    step: number | "any";
                    minlength: number;
                    maxlength: number;
                }> | undefined>;
            };
            errors: string[] | undefined;
            value: import("sveltekit-superforms/dist/stringPath").FormPathType<import("zod").TypeOf<import("sveltekit-superforms").UnwrapEffects<T>>, Path>;
            constraints: Partial<{
                pattern: string;
                min: string | number;
                max: string | number;
                required: boolean;
                step: number | "any";
                minlength: number;
                maxlength: number;
            }> | undefined;
            handlers: import("../internal/index.js").FieldHandlers;
            attrs: {
                input: import("../internal/index.js").FieldAttrs<import("sveltekit-superforms/dist/stringPath").FormPathType<import("zod").TypeOf<import("sveltekit-superforms").UnwrapEffects<T>>, Path>>;
                label: {
                    for: string;
                };
                description: {
                    id: string;
                };
                validation: {
                    readonly id: string;
                    readonly "aria-live": "assertive";
                };
            };
            actions: import("../internal/index.js").FieldActions;
            setValue: import("../internal/index.js").FieldValueSetter;
        };
    };
}
export type FormFieldProps<T extends AnyZodObject | FormValidation, Path extends FormFieldName<T>> = ReturnType<__sveltets_Render<T, Path>['props']>;
export type FormFieldEvents<T extends AnyZodObject | FormValidation, Path extends FormFieldName<T>> = ReturnType<__sveltets_Render<T, Path>['events']>;
export type FormFieldSlots<T extends AnyZodObject | FormValidation, Path extends FormFieldName<T>> = ReturnType<__sveltets_Render<T, Path>['slots']>;
export default class FormField<T extends AnyZodObject | FormValidation, Path extends FormFieldName<T>> extends SvelteComponent<FormFieldProps<T, Path>, FormFieldEvents<T, Path>, FormFieldSlots<T, Path>> {
}
export {};
